#plot(sample(p4, replace=F)[1:10000])
iters <- read_bench("fft_p4/run",1)$tsc
sd(iters)/mean(iters)
readDacapo <- function(fn) {
out <- readLines(fn)
rlines <- grep("==== DaCapo .* in [0-9]+ msec.*", out, val=T) timesms <- as.numeric(gsub(".* in ([0-9]+) msec.*","\\1",rlines)) timesms / 1000
readDacapo <- function(fn) {
out <- readLines(fn)
rlines <- grep("==== DaCapo .* in [0-9]+ msec.*", out, val=T)
timesms <- as.numeric(gsub(".* in ([0-9]+) msec.*","\\1",rlines))
timesms / 1000
}
x <- readDacapo("dacapo/chart6/chart6_1_1.out") plot(x)
readDacapo <- function(fn) {
out <- readLines(fn)
rlines <- grep("==== DaCapo .* in [0-9]+ msec.*", out, val=T)
timesms <- as.numeric(gsub(".* in ([0-9]+) msec.*","\\1",rlines))
timesms / 1000
}
x <- readDacapo("dacapo/chart6/chart6_1_1.out")
plot(x)
plot(x)
readDacapo <- function(fn) {
out <- readLines(fn)
rlines <- grep("==== DaCapo .* in [0-9]+ msec.*", out, val=T)
timesms <- as.numeric(gsub(".* in ([0-9]+) msec.*","\\1",rlines))
timesms / 1000
}
x <- readDacapo("dacapo/chart6/chart6_1_1.out")
plot(x)
readDacapo <- function(fn) {
out <- readLines(fn)
rlines <- grep("==== DaCapo .* in [0-9]+ msec.*", out, val=T)
timesms <- as.numeric(gsub(".* in ([0-9]+) msec.*","\\1",rlines))
timesms / 1000
}
x <- readDacapo("dacapo/chart6/chart6_1_2.out")
x <- read_Dacapo("dacapo/chart6/chart6_3_1.out")
read_Dacapo <- function(fn) {
out <- readLines(fn)
rlines <- grep("==== DaCapo .* in [0-9]+ msec.*", out, val=T)
timesms <- as.numeric(gsub(".* in ([0-9]+) msec.*","\\1",rlines))
timesms / 1000
}
x <- read_Dacapo("dacapo/chart6/chart6_1_1.out")
x <- read_Dacapo("dacapo/chart6/chart6_1_1.out")
x <- read_Dacapo("dacapo/chart6/chart6_3_1.out")
plot(x)
read_Dacapo <- function(fn) {
out <- readLines(fn)
rlines <- grep("==== DaCapo .* in [0-9]+ msec.*", out, val=T)
timesms <- as.numeric(gsub(".* in ([0-9]+) msec.*","\\1",rlines))
timesms / 1000
}
x <- read_Dacapo("dacapo/chart6/chart6_1_1.out")
plot(x)
x <- read_Dacapo("dacapo/chart6/chart6_2_1.out")
plot(x)
x <- read_Dacapo("dacapo/chart6/chart6_3_1.out")
plot(x)
list.files("dacapo")
list.files("dacapo/h29")
list_out_files <- function(bench)  list.files(paste("dacapo", bench, sep="/"), pattern="*.out")
read_dacapo_bench <- function(b)
sum(
sapply( list_out_files(bench),
function(f) sum(readDacapo(paste("dacapo", bench, f, sep="/")))))
st <-sapply(list.files("dacapo"), read_dacapo_bench)
list_out_files <- function(bench)  list.files(paste("dacapo", bench, sep="/"), pattern="*.out")
read_dacapo_bench <- function(bench)
sum(
sapply( list_out_files(bench),
function(f) sum(readDacapo(paste("dacapo", bench, f, sep="/")))))
st <-sapply(list.files("dacapo"), read_dacapo_bench)
sum(st)/3600
st
list.files("h29")
list.files("fop9")
list.files("dacapo/fop9")
readDacapo("dacapo/fop9/fop9_1_1.out")
length(readDacapo("dacapo/fop9/fop9_1_1.out"))
length(readDacapo("dacapo/fop9/fop9_2_1.out"))
length(readDacapo("dacapo/fop9/fop9_3_1.out"))
st
list_out_files <- function(bench)  list.files(paste("dacapo", bench, sep="/"), pattern="*.out")
read_dacapo_bench <- function(bench)
length(
sapply( list_out_files(bench),
function(f) sum(readDacapo(paste("dacapo", bench, f, sep="/")))))
st <-sapply(list.files("dacapo"), read_dacapo_bench)
sum(st)/3600
st
list_out_files <- function(bench)  list.files(paste("dacapo", bench, sep="/"), pattern="*.out")
read_dacapo_bench <- function(bench)
sum(
sapply( list_out_files(bench),
function(f) length(readDacapo(paste("dacapo", bench, f, sep="/")))))
st <-sapply(list.files("dacapo"), read_dacapo_bench)
sum(st)/3600
st
list_out_files <- function(bench)  list.files(paste("dacapo", bench, sep="/"), pattern="*.out")
read_dacapo_bench <- function(bench)
sum(
sapply( list_out_files(bench),
function(f) sum(readDacapo(paste("dacapo", bench, f, sep="/")))))
st <-sapply(list.files("dacapo"), read_dacapo_bench)
st
sum(st)
sum(st)/3600
df <- cbin(benchmark=names(st), data.frame(time=st/3600))
df <- cbind(benchmark=names(st), data.frame(time=st/3600))
df
data.frame(time=st)
df <- cbind(benchmark=names(st), data.frame(time=round(st/3600,3)))
ggplot(df)  +
geom_bar()
df <- cbind(benchmark=names(st), data.frame(time=round(st/3600,3)))
ggplot(df)  +
geom_bar(mapping=aes(x=names(df), y=time))
names(df)
rownames(df)
df <- cbind(benchmark=names(st), data.frame(time=round(st/3600,3)))
ggplot(df)  +
geom_bar(mapping=aes(x=rownames(df), y=time))
df <- cbind(benchmark=names(st), data.frame(time=round(st/3600,3)))
ggplot(df)  +
geom_bar(mapping=aes(x=rownames(df), y=time), stat="identity")
df <- cbind(benchmark=names(st), data.frame(time=round(st/3600,3)))
ggplot(df)  +
geom_bar(mapping=aes(x=rownames(df), y=time), stat="identity", color="blue") +
xlab("")
df <- cbind(benchmark=names(st), data.frame(time=round(st/3600,3)))
ggplot(df)  +
geom_bar(mapping=aes(x=rownames(df), y=time), stat="identity") +
xlab("") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df <- data.frame(time=round(st/3600,3))
ggplot(df)  +
geom_bar(mapping=aes(x=rownames(df), y=time), stat="identity") +
xlab("") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
bc
ast <- as.matrix(read.table("ast.out", row.names=1))
bc <- as.matrix(read.table("bc.out", row.names=1))
ast
mean(bc["pidigits"]/ast["pidigits"])
bc["pidigits"]
bc["pidigit"]
names(bc)
ast
bc
bc["spectralnorm"]
bc["spectralnorm",]
mean(bc["pidigits",]/ast["pidigits",])
(bc["pidigits",]/ast["pidigits",])
(ast["pidigits",]/bc["pidigits",])
mean(ast["pidigits",]/bc["pidigits",])
ci <- boot.ci(b, conf=0.95, type="perc")
ci
ci$percent
f <- function(d, sel) mean(d[sel,"old"])/mean(d[sel,"new"])
b <- boot(pidata, f, R=10000)
ci <- boot.ci(b, conf=0.95, type="perc")
pidata <- data.frame(new=bc["pidigits",], old=ast["pidigits",])
f <- function(d, sel) mean(d[sel,"old"])/mean(d[sel,"new"])
b <- boot(pidata, f, R=10000)
ci <- boot.ci(b, conf=0.95, type="perc")
ci
# df_row_mean: DataFrame x [Num] -> [Num]
# Return the ration of the mean
df_row_mean <- function(df, sel) mean(df[sel,"old"]) / mean(df[sel, "new"])
# cfratio: Num x Num -> result is [Num, Num]
# Returns result which is a pair of numbers
cfratio <- function(oldvec, newvec) {
df <- data.frame(old=oldvec, new=newvec)
b <- boot(df, df_row_mean, R=10000)
ci <- boot.ci(b, conf=0.95, type="perc")
ci$perc[4:5] # low, hi
}
cfratios <- function(old, new) { # old/new - matrices benchmarks x times
m <- sapply(rownames(old), function(b) {
o <- old[b,]
n <- new[b,]
c(cfratio(o,n), mean(o)/mean(n))
})
rownames(m) <- c("low", "hi", "meansRatio")
t(m) # matrix benchmarks x c("low", "hi", "meansRatio")
}
theme_update(
axis.text.x = element_text(angle=90, hjust=1) )
plotErrbars <- function(df) {
library(ggplot2)
theme_set(theme_minimal())
theme_update(
axis.text.x = element_text(angle=90, hjust=1) )
ggplot(df, aes(x=row.names(df), y=meansRatio)) + geom_bar(position=position_dodge(), stat="identity",
colour="black", fill="blue") +
geom_errorbar(aes(ymin=low, ymax=hi), position=position_dodge(),
colour="red") +
xlab("") +
ylab("Speedup [time of AST/BC]") +
ggtitle("Speedup of BC over AST")
}
m <- cfratios(ast, bc)
plotErrbars(as.data.frame(m))
df <-as.data.frame( cfratios(ast, bc))
ggplot(df, aes(x=row.names(df), y=meansRatio)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=low, ymax=hi), position=position_dodge(),
colour="red") +
xlab("") +
theme(axis.text.x = element_text(angle=90, hjust=1) )
if (file.exists("/Users/jan")) {
knitr::opts_knit$set(root.dir = normalizePath("/Users/jan/Dropbox/j/teach/5110/DataAnalysis17/Performance/data/files"))
} else {
knitr::opts_knit$set(root.dir = normalizePath("/Users/jv/Dropbox/j/teach/5110/DataAnalysis17/Performance/data/files"))
}
require("ggplot2")
require("dplyr")
require("assertthat")
require("testthat")
out <- readLines("fop.out")
rlines <-  grep("==== DaCapo .* in [0-9]+ msec.*", out, val=T)
timesms <-  as.numeric(gsub(".* in ([0-9]+) msec.*","\\1",rlines))
x <- timesms / 1000
hist(x, freq=T)
hist(x, freq=F, ylim=c(0,5))
lines(density(x))
plot(
sapply(
1:length(x),
function(i) mean(x[1:i])),
type="o",
ylab="Mean of first N",
xlab="N"
)
plot(x)
simulatedMeans <- sapply(1:100,
function(i)
mean(sample(x, replace=T)))
hist(simulatedMeans, prob=T)
lines(density(simulatedMeans))
r <- quantile(simulatedMeans, probs=c(0.975, 0.025))
r
library(boot)
b <- boot(x, function(d, sel) mean(d[sel]), R=10000)
boot.ci(b, conf=0.95, type="perc")
d <- sapply(1:50, function(x)1/x)
i <- sample(d,replace=F)
plot(d)
plot(i)
lag.plot(d)
lag.plot(i,
do.lines=F, # don't draw lines
labels=F,   # don't put labels
pch=3)      # use crosses for points
c <- d
c[c(T,F)] <- i[c(T,F)]
plot(c)
lag.plot(c, labels=F,do.lines=F)
lag.plot(i[1:21], lags=4)
acf(d)
acf(i)
acf(c)
read_bench <- function(name, n)  read.table(paste(name, n, ".out", sep=""), header=T)
read_fft <- function(n)  read_bench("fft_ia64/run", n)
summary(read_fft(1))
read_fft(1)[1:10,]
runs <- lapply(1:100, function(n) (read_fft(n))[["CPU_CYCLES"]] )
ia64 <- Reduce(c, runs)
ia64 <- ia64/(800.179008*1e6)
ia64[1:10]
#plot(ia64)
plot(ia64[1:(2048*5)])
runs <- lapply(1:100, function(n) read_bench("fft_ia64/run", n))
ia64 <- Reduce(rbind, runs)
plot(ia64)
runs4 <- lapply(1:100, function(n) read_bench("fft_p4/run", n)[["CPU_CYCLES"]])
p4 <- Reduce(c, runs4)
p4 <- p4/(2194.055*1e6)
plot(p4[1:10000])
p4[1:11]
p4
runs4
runs4 <- lapply(1:100, function(n) read_bench("fft_p4/run", n)[["CPU_CYCLES"]])
p4 <- Reduce(c, runs4)
p4 <- p4/(2194.055*1e6)
plot(p4[1:10000])
p4
runs4
read_bench("fft_p4/run", 1)
read_bench("fft_p4/run", 1)[["CPU_CYCLES"]]
read_bench("fft_p4/run", 1)[1]
read_bench("fft_p4/run", 1)[1,]
runs4 <- lapply(1:100, function(n) read_bench("fft_p4/run", n)[["tsc"]])
if (file.exists("/Users/jan")) {
knitr::opts_knit$set(root.dir = normalizePath("/Users/jan/Dropbox/j/teach/5110/DataAnalysis17/Performance/data/files"))
} else {
knitr::opts_knit$set(root.dir = normalizePath("/Users/jv/Dropbox/j/teach/5110/DataAnalysis17/Performance/data/files"))
}
require("ggplot2")
require("dplyr")
require("assertthat")
require("testthat")
out <- readLines("fop.out")
rlines <-  grep("==== DaCapo .* in [0-9]+ msec.*", out, val=T)
timesms <-  as.numeric(gsub(".* in ([0-9]+) msec.*","\\1",rlines))
x <- timesms / 1000
hist(x, freq=T)
hist(x, freq=F, ylim=c(0,5))
lines(density(x))
plot(
sapply(
1:length(x),
function(i) mean(x[1:i])),
type="o",
ylab="Mean of first N",
xlab="N"
)
plot(x)
simulatedMeans <- sapply(1:100,
function(i)
mean(sample(x, replace=T)))
hist(simulatedMeans, prob=T)
lines(density(simulatedMeans))
r <- quantile(simulatedMeans, probs=c(0.975, 0.025))
r
library(boot)
b <- boot(x, function(d, sel) mean(d[sel]), R=10000)
boot.ci(b, conf=0.95, type="perc")
d <- sapply(1:50, function(x)1/x)
i <- sample(d,replace=F)
plot(d)
plot(i)
lag.plot(d)
lag.plot(i,
do.lines=F, # don't draw lines
labels=F,   # don't put labels
pch=3)      # use crosses for points
c <- d
c[c(T,F)] <- i[c(T,F)]
plot(c)
lag.plot(c, labels=F,do.lines=F)
lag.plot(i[1:21], lags=4)
acf(d)
acf(i)
acf(c)
read_bench <- function(name, n)  read.table(paste(name, n, ".out", sep=""), header=T)
read_fft <- function(n)  read_bench("fft_ia64/run", n)
summary(read_fft(1))
read_fft(1)[1:10,]
runs <- lapply(1:100, function(n) (read_fft(n))[["CPU_CYCLES"]] )
ia64 <- Reduce(c, runs)
ia64 <- ia64/(800.179008*1e6)
ia64[1:10]
#plot(ia64)
plot(ia64[1:(2048*5)])
runs <- lapply(1:100, function(n) read_bench("fft_ia64/run", n))
ia64 <- Reduce(rbind, runs)
plot(ia64)
runs4 <- lapply(1:100, function(n) read_bench("fft_p4/run", n)[["tsc"]])
p4 <- Reduce(c, runs4)
p4 <- p4/(2194.055*1e6)
plot(p4[1:10000])
plot(sample(p4, replace=F)[1:10000])
x <- read_bench("fft_p4/run",1)$tsc
sd(x)/mean(x)
r <- sapply(1:100, function(n) read_bench("fft_p4/run", n)$tsc[1])
sd(r)/mean(r)
read_Dacapo <- function(fn) {
out <- readLines(fn)
rlines <- grep("==== DaCapo .* in [0-9]+ msec.*", out, val=T)
timesms <- as.numeric(gsub(".* in ([0-9]+) msec.*","\\1",rlines))
timesms / 1000
}
x <- read_Dacapo("dacapo/chart6/chart6_1_1.out")
plot(x)
x <- read_Dacapo("dacapo/chart6/chart6_2_1.out")
plot(x)
x <- read_Dacapo("dacapo/chart6/chart6_3_1.out")
plot(x)
list_out_files <- function(bench)  list.files(paste("dacapo", bench, sep="/"), pattern="*.out")
read_dacapo_bench <- function(bench)
sum(
sapply( list_out_files(bench),
function(f) sum(readDacapo(paste("dacapo", bench, f, sep="/")))))
st <-sapply(list.files("dacapo"), read_dacapo_bench)
st
df <- data.frame( Time=round(st/3600,3))
ggplot(df)  +
geom_bar(mapping = aes(x=rownames(df), y=Time), statas="identity") +
xlab("") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df <- data.frame( Time=round(st/3600,3))
ggplot(df)  +
geom_bar(mapping = aes(x=rownames(df), y=Time), stats="identity") +
xlab("") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df <- data.frame( Time=round(st/3600,3))
ggplot(df)  +
geom_bar(mapping = aes(x=rownames(df), y=Time), stats="identity") +
xlab("") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ggplot(df)  +
geom_bar(mapping = aes(x=rownames(df), y=Time), stats="identity")
ggplot(df)  +
geom_bar(mapping = aes(x=rownames(df), y=Time))
ggplot(df)  +
geom_bar(stats="identity", mapping = aes(x=rownames(df), y=Time))
df <- data.frame( Time=round(st/3600,3))
ggplot(df)  +
geom_bar(mapping = aes(x=rownames(df), y=Time), stat="identity") +
xlab("") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
df <- data.frame( Time=round(st/3600,3))
ggplot(df)  +
geom_bar(mapping = aes(x=rownames(df), y=Time), stat="identity") +
xlab("") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
ast <- as.matrix(read.table("ast.out", row.names=1))
bc <- as.matrix(read.table("bc.out", row.names=1))
ast
mean(ast["pidigits",]/bc["pidigits",])
pidata <- data.frame(new=bc["pidigits",], old=ast["pidigits",])
f <- function(d, sel) mean(d[sel,"old"])/mean(d[sel,"new"])
b <- boot(pidata, f, R=10000)
ci <- boot.ci(b, conf=0.95, type="perc")
ci
# df_row_mean: DataFrame x [Num] -> [Num]
# Return the ration of the mean
df_row_mean <- function(df, sel) mean(df[sel,"old"]) / mean(df[sel, "new"])
# cfratio: Num x Num -> result is [Num, Num]
# Returns result which is a pair of numbers
cfratio <- function(oldvec, newvec) {
df <- data.frame(old=oldvec, new=newvec)
b <- boot(df, df_row_mean, R=10000)
ci <- boot.ci(b, conf=0.95, type="perc")
ci$perc[4:5] # low, hi
}
cfratios <- function(old, new) { # old/new - matrices benchmarks x times
m <- sapply(rownames(old), function(b) {
o <- old[b,]
n <- new[b,]
c(cfratio(o,n), mean(o)/mean(n))
})
rownames(m) <- c("low", "hi", "meansRatio")
t(m) # matrix benchmarks x c("low", "hi", "meansRatio")
}
df <-as.data.frame( cfratios(ast, bc))
ggplot(df, aes(x=row.names(df), y=meansRatio)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=low, ymax=hi), position=position_dodge(),
colour="red") +
xlab("") +
theme(axis.text.x = element_text(angle=90, hjust=1) )
ast <- as.matrix(read.table("ast.out", row.names=1))
ast <- as.matrix(read.table("ast.out", row.names=1))
bc <- as.matrix(read.table("bc.out", row.names=1))
ast
mean(ast["pidigits",]/bc["pidigits",])
pidata <- data.frame(new=bc["pidigits",], old=ast["pidigits",])
f <- function(d, sel) mean(d[sel,"old"])/mean(d[sel,"new"])
b <- boot(pidata, f, R=10000)
ci <- boot.ci(b, conf=0.95, type="perc")
ci
cfratio <- function(oldvec, newvec) {
df <- data.frame(old=oldvec, new=newvec)
b <- boot(df, df_row_mean, R=10000)
ci <- boot.ci(b, conf=0.95, type="perc")
ci$perc[4:5] # low, hi
}
# df_row_mean: DataFrame x [Num] -> [Num]
# Return the ration of the mean
df_row_mean <- function(df, sel) mean(df[sel,"old"]) / mean(df[sel, "new"])
# cfratio: Num x Num -> result is [Num, Num]
# Returns result which is a pair of numbers
cfratio <- function(oldvec, newvec) {
df <- data.frame(old=oldvec, new=newvec)
b <- boot(df, df_row_mean, R=10000)
ci <- boot.ci(b, conf=0.95, type="perc")
ci$perc[4:5] # low, hi
}
cfratios <- function(old, new) { # old/new - matrices benchmarks x times
m <- sapply(rownames(old), function(b) {
o <- old[b,]
n <- new[b,]
c(cfratio(o,n), mean(o)/mean(n))
})
rownames(m) <- c("low", "hi", "meansRatio")
t(m) # matrix benchmarks x c("low", "hi", "meansRatio")
}
df <-as.data.frame( cfratios(ast, bc))
ggplot(df, aes(x=row.names(df), y=meansRatio)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=low, ymax=hi), position=position_dodge(),
colour="red") +
xlab("") +
theme(axis.text.x = element_text(angle=90, hjust=1) )
read_bench <- function(name, n)  read.table(paste(name, n, ".out", sep=""), header=T)
read_fft <- function(n)  read_bench("fft_ia64/run", n)
summary(read_fft(1))
read_fft(1)[1:10,]
runs <- lapply(1:100, function(n) (read_fft(n))[["CPU_CYCLES"]] )
runs <- lapply(1:100, function(n) (read_fft(n))[["CPU_CYCLES"]] )
ia64 <- Reduce(c, runs)
ia64 <- ia64/(800.179008*1e6)
ia64[1:10]
plot(ia64)
plot(ia64[1:(2048*5)])
runs <- lapply(1:100, function(n) read_bench("fft_ia64/run", n))
ia64 <- Reduce(rbind, runs)
plot(ia64)
